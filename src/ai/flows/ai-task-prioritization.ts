// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for AI-powered task prioritization based on shipment deadlines and dependencies.
 *
 * - aiTaskPrioritization: An asynchronous function that takes a list of tasks and returns a prioritized list with explanations.
 * - AiTaskPrioritizationInput: The input type for the aiTaskPrioritization function, defining the structure of a task.
 * - AiTaskPrioritizationOutput: The output type for the aiTaskPrioritization function, defining the structure of a prioritized task with explanation.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the schema for a single task
const TaskSchema = z.object({
  id: z.string().describe('Unique identifier for the task.'),
  task: z.string().describe('Description of the task to be performed.'),
  shipmentId: z.string().describe('The shipment ID associated with the task.'),
  deadline: z.string().describe('The deadline for the task (ISO format: YYYY-MM-DD).'),
  dependencies: z.array(z.string()).describe('List of task IDs that must be completed before this task can start.'),
  assignee: z.string().describe('The person responsible for the task.'),
  status: z.enum(['To-Do', 'In-Progress', 'Done']).describe('Current status of the task.'),
});

// Define the input schema as an array of TaskSchema
const AiTaskPrioritizationInputSchema = z.array(TaskSchema).describe('An array of tasks to be prioritized.');
export type AiTaskPrioritizationInput = z.infer<typeof AiTaskPrioritizationInputSchema>;

// Define the output schema for a single prioritized task
const PrioritizedTaskSchema = TaskSchema.extend({
  priority: z.number().describe('The priority of the task (1 being highest).'),
  explanation: z.string().describe('Explanation of why this task was prioritized as such.'),
});

// Define the output schema as an array of PrioritizedTaskSchema
const AiTaskPrioritizationOutputSchema = z.array(PrioritizedTaskSchema).describe('An array of tasks with assigned priorities and explanations.');
export type AiTaskPrioritizationOutput = z.infer<typeof AiTaskPrioritizationOutputSchema>;

// Exported function to prioritize tasks
export async function aiTaskPrioritization(input: AiTaskPrioritizationInput): Promise<AiTaskPrioritizationOutput> {
  return aiTaskPrioritizationFlow(input);
}

// Define the prompt for task prioritization
const prioritizeTasksPrompt = ai.definePrompt({
  name: 'prioritizeTasksPrompt',
  input: {schema: AiTaskPrioritizationInputSchema},
  output: {schema: AiTaskPrioritizationOutputSchema},
  prompt: `You are an AI assistant that helps prioritize logistics tasks based on deadlines and dependencies.

Given the following list of tasks, prioritize them based on their deadlines and dependencies. Tasks with earlier deadlines and more dependencies should be prioritized higher. Provide a brief explanation for each task's priority.

Tasks:
{{#each this}}
- ID: {{id}}
  Task: {{task}}
  Shipment ID: {{shipmentId}}
  Deadline: {{deadline}}
  Dependencies: {{dependencies}}
  Assignee: {{assignee}}
  Status: {{status}}
{{/each}}

Output the tasks in order of priority, along with a brief explanation for each task's assigned priority. Return a JSON array of prioritized tasks, each including the original task details, a 'priority' field (1 being highest priority), and an 'explanation' field.

Example Output:
[
  {
    "id": "1",
    "task": "Pack Shipment A",
    "shipmentId": "SHIP-001",
    "deadline": "2024-03-10",
    "dependencies": [],
    "assignee": "Alice",
    "status": "To-Do",
    "priority": 1,
    "explanation": "This task has the earliest deadline and no dependencies, making it the highest priority."
  },
  ...
]
`,
});

// Define the Genkit flow for task prioritization
const aiTaskPrioritizationFlow = ai.defineFlow(
  {
    name: 'aiTaskPrioritizationFlow',
    inputSchema: AiTaskPrioritizationInputSchema,
    outputSchema: AiTaskPrioritizationOutputSchema,
  },
  async input => {
    const {output} = await prioritizeTasksPrompt(input);
    return output!;
  }
);
